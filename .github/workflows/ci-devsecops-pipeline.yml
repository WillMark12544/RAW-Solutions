name: CI DevSecOps Pipeline

on:
  # push:
  #   branches:
  #     - "master"
  # pull_request:
  #   branches:
  #     - "master"
  workflow_dispatch: {}

jobs:
  build:
    name: Build App
    runs-on: ubuntu-latest
    env:
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run UNIT and INTEGRATION TESTS
        run: dotnet test NotesSampleApplication.Tests/NotesSampleApplication.Tests.csproj --verbosity normal

      - name: Build docker images with docker-compose.yml
        run: docker compose -f NotesSampleApplication/docker-compose.yml build

      - name: Start Database and WebApp
        run: docker compose -f NotesSampleApplication/docker-compose.yml up -d
        
      - name: Check WebApp is reachable
        run: |
          for i in {1..10}; do
            if curl -fs http://localhost:8080 > /dev/null; then
              echo "WebApp is reachable!"
              exit 0
            fi
            echo "Waiting for the WebApp to respond..."
            sleep 5
          done
          echo "WebApp is not reachable!"
          exit 1
            
      - name: Save Docker image
        run: docker save notes_web_app:latest -o notes_web_app.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: notes-webapp-image
          path: notes_web_app.tar
          retention-days: 1

  secret-scan:
    name: Secret Scan w/ Gitleaks
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Gitleaks to run directly
        # Install latest version of Gitleaks at time of development (8.20.0)
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz \
          | tar -xz
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks Secret Scan
        run: |
          gitleaks detect --source . --redact --report-format json --report-path secret-scan-results.json --exit-code 0

      - name: Upload Gitleaks Secret Scan output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: secret-scan-results.json
          retention-days: 1

  image-scan:
    name: Image Scan w/ Trivy
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Download docker image for Image Scan
        uses: actions/download-artifact@v5
        with:
          name: notes-webapp-image
          path: ./notes-webapp-image
          
      - name: Load docker image for Image Scan
        run: docker load -i notes-webapp-image/notes_web_app.tar

      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: notes_web_app:latest
          format: 'json'
          output: 'image-scan-results.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy Image Scan output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-scan-results
          path: image-scan-results.json
          retention-days: 1

  sast:
    name: SAST w/ Semgrep
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep SAST
        run: |
          semgrep \
          --config p/default \
          --config p/owasp-top-ten \
          --config p/security-audit \
          --config p/csharp \
          --config p/security-code-scan \
          --config p/insecure-transport \
          --dataflow-traces \
          --json \
          --output sast-results.json

      - name: Upload Semgrep SAST output as artifact
        uses: actions/upload-artifact@v4
        with: 
          name: sast-results
          path: sast-results.json
          retention-days: 1

  sca:
    name: SCA w/ Trivy
    runs-on: ubuntu-latest
    needs: 
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy SCA
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'json'
          output: 'sca-results.json'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy SAST output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sca-results
          path: sca-results.json
          retention-days: 1

  dast:
    name: DAST w/ OWASP Zap
    runs-on: ubuntu-latest
    needs:
      - build
      - sast
      - sca
      - image-scan
      - secret-scan
    env:
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
      ZAP_USERNAME: ${{ secrets.ZAP_USERNAME }}
      ZAP_PASSWORD: ${{ secrets.ZAP_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download docker image for DAST
        uses: actions/download-artifact@v5
        with:
          name: notes-webapp-image
          path: ./notes-webapp-image

      - name: Load docker image for DAST
        run: docker load -i notes-webapp-image/notes_web_app.tar

      - name: Start Database and WebApp
        run: docker compose -f NotesSampleApplication/docker-compose.yml up -d

      - name: Check WebApp is reachable
        run: |
          for i in {1..10}; do
            if curl -fs http://localhost:8080 > /dev/null; then
              echo "WebApp is reachable!"
              exit 0
            fi
            echo "Waiting for the WebApp to respond..."
            sleep 5
          done
          echo "WebApp is not reachable!"
          exit 1

      - name: Pull OWASP ZAP Docker image
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: Run Authenticated ZAP Automation Framework 
        run: |
          docker run \
          --user root \
          --add-host=host.docker.internal:host-gateway \
          -e ZAP_USERNAME="${ZAP_USERNAME}" \
          -e ZAP_PASSWORD="${ZAP_PASSWORD}" \
          -v ${{ github.workspace }}:/zap/wrk/:rw \
          -t ghcr.io/zaproxy/zaproxy:stable \
          zap.sh -cmd -autorun /zap/wrk/zap-auth-automation.yml
        
      - name: Upload ZAP DAST as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dast-results
          path: ${{ github.workspace }}/dast-results.xml
          retention-days: 1

  defectdojo-upload:
    name: Upload scans to local DefectDojo instance
    runs-on: self-hosted
    needs:
      - sast
      - sca
      - image-scan
      - secret-scan
      - dast
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Image Scan Artifact
        uses: actions/download-artifact@v5
        with:
          name: image-scan-results
          path: ./results
      
      - name: Download Secret Scan Artifact
        uses: actions/download-artifact@v5
        with:
          name: secret-scan-results
          path: ./results
          
      - name: Donwload SAST Artifact
        uses: actions/download-artifact@v5
        with:
          name: sast-results
          path: ./results
          
      - name: Download SCA Artifact
        uses: actions/download-artifact@v5
        with:
          name: sca-results
          path: ./results
      
      - name: Download DAST Artifact 
        uses: actions/download-artifact@v5
        with:
          name: dast-results
          path: ./results

      - name: Upload Image Scan to DefectDojo
        uses: ./.github/actions/defectdojo-upload
        with:
          file: results/image-scan-results.json
          scan_type: "Trivy Scan"
          branch_name: ${{ github.ref_name }}
          defectdojo_host: ${{ secrets.DEFECTDOJO_HOST }}
          defectdojo_api_key: ${{ secrets.DEFECTDOJO_API_KEY }}
          master_engagement_id: ${{ secrets.MASTER_ENGAGEMENT_ID }}
          development_engagement_id: ${{ secrets.DEVELOPMENT_ENGAGEMENT_ID }}

      - name: Upload Secret Scan to DefectDojo
        uses: ./.github/actions/defectdojo-upload
        with:
          file: results/secret-scan-results.json
          scan_type: "Gitleaks Scan"
          branch_name: ${{ github.ref_name }}
          defectdojo_host: ${{ secrets.DEFECTDOJO_HOST }}
          defectdojo_api_key: ${{ secrets.DEFECTDOJO_API_KEY }}
          master_engagement_id: ${{ secrets.MASTER_ENGAGEMENT_ID }}
          development_engagement_id: ${{ secrets.DEVELOPMENT_ENGAGEMENT_ID }}

      - name: Upload SAST to DefectDojo
        uses: ./.github/actions/defectdojo-upload
        with:
          file: results/sast-results.json
          scan_type: "Semgrep JSON Report"
          branch_name: ${{ github.ref_name }}
          defectdojo_host: ${{ secrets.DEFECTDOJO_HOST }}
          defectdojo_api_key: ${{ secrets.DEFECTDOJO_API_KEY }}
          master_engagement_id: ${{ secrets.MASTER_ENGAGEMENT_ID }}
          development_engagement_id: ${{ secrets.DEVELOPMENT_ENGAGEMENT_ID }}

      - name: Upload SCA to DefectDojo
        uses: ./.github/actions/defectdojo-upload
        with:
          file: results/sca-results.json
          scan_type: "Trivy Scan"
          branch_name: ${{ github.ref_name }}
          defectdojo_host: ${{ secrets.DEFECTDOJO_HOST }}
          defectdojo_api_key: ${{ secrets.DEFECTDOJO_API_KEY }}
          master_engagement_id: ${{ secrets.MASTER_ENGAGEMENT_ID }}
          development_engagement_id: ${{ secrets.DEVELOPMENT_ENGAGEMENT_ID }}

      - name: Upload DAST to DefectDojo
        uses: ./.github/actions/defectdojo-upload
        with:
          file: results/dast-results.xml
          scan_type: "ZAP Scan"
          branch_name: ${{ github.ref_name }}
          defectdojo_host: ${{ secrets.DEFECTDOJO_HOST }}
          defectdojo_api_key: ${{ secrets.DEFECTDOJO_API_KEY }}
          master_engagement_id: ${{ secrets.MASTER_ENGAGEMENT_ID }}
          development_engagement_id: ${{ secrets.DEVELOPMENT_ENGAGEMENT_ID }}
