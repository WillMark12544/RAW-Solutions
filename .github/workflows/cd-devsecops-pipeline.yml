name: CD (Deploy to Azure on Windows)

on:
  workflow_run:
    workflows: ["CI DevSecOps Pipeline"] # must match CI 'name'
    types: [completed]
    branches: [master]

jobs:
  deploy-to-azure:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- DIAGNOSTICS: confirm which CI run we're targeting -------------------
      - name: Show triggering workflow_run info
        shell: pwsh
        run: |
          Write-Host "workflow_run.id: $env:RID"
          Write-Host "workflow_run.name: $env:RNAME"
          Write-Host "workflow_run.head_branch: $env:RBRANCH"
        env:
          RID: ${{ github.event.workflow_run.id }}
          RNAME: ${{ github.event.workflow_run.name }}
          RBRANCH: ${{ github.event.workflow_run.head_branch }}

      - name: List artifacts on the CI run
        uses: actions/github-script@v7
        with:
          script: |
            const runId = Number(process.env.RUN_ID);
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100,
            });
            core.info(`Found ${data.artifacts.length} artifact(s):`);
            for (const a of data.artifacts) {
              core.info(`- ${a.name} (expired=${a.expired}, size=${a.size_in_bytes})`);
            }
        env:
          RUN_ID: ${{ github.event.workflow_run.id }}

      # --- Download ALL artifacts from the CI run (no name filter!) -----------
      - name: Download ALL artifacts from CI run
        uses: actions/download-artifact@v4
        with:
          path: ./_ci_artifacts
          run-id: ${{ github.event.workflow_run.id }}

      - name: Verify downloaded files
        shell: pwsh
        run: |
          Write-Host "üì¶ Contents of ./_ci_artifacts"
          Get-ChildItem -Recurse ./_ci_artifacts | ForEach-Object { $_.FullName }

      # --- Prepare a deployable ZIP package for Azure Web Apps -----------------
      - name: Resolve deployment package
        id: resolve_pkg
        shell: pwsh
        run: |
          # 1) Prefer an existing *.zip (e.g., package.zip) anywhere under _ci_artifacts
          $zips = Get-ChildItem -Recurse -File ./_ci_artifacts -Include *.zip | Select-Object -ExpandProperty FullName
          if ($zips.Count -gt 0) {
            Write-Host "Found existing ZIP package: $($zips[0])"
            Copy-Item $zips[0] package.zip -Force
            Write-Output "package=package.zip" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # 2) If no zip, see if we have a likely publish/build folder to zip
          #    Heuristics: look for folders containing common webapp files
          $candidates = Get-ChildItem -Recurse -Directory ./_ci_artifacts | Where-Object {
            Test-Path (Join-Path $_.FullName "web.config") -or
            (Get-ChildItem -Recurse -File $_.FullName -ErrorAction SilentlyContinue | Where-Object {
              $_.Name -match '\.(dll|exe|csproj|deps\.json|runtimeconfig\.json|config|js|html|css)$'
            })
          } | Select-Object -ExpandProperty FullName -Unique

          if ($candidates.Count -gt 0) {
            $src = $candidates[0]
            Write-Host "Zipping candidate folder: $src"
            if (Test-Path package.zip) { Remove-Item package.zip -Force }
            Compress-Archive -Path (Join-Path $src '*') -DestinationPath package.zip
            Write-Output "package=package.zip" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # 3) If we only have Docker image TARs, fail with a clear message
          $tars = Get-ChildItem -Recurse -File ./_ci_artifacts -Include *.tar | Select-Object -ExpandProperty FullName
          if ($tars.Count -gt 0) {
            Write-Error "Found Docker TAR(s) but no deployable ZIP. Windows runners cannot load Linux Docker images. Options: (a) change CD to 'ubuntu-latest' and deploy the container, or (b) change CI to produce a ZIP artifact for Web App ZIP deploy."
            exit 1
          }

          Write-Error "No deployable ZIP or suitable build folder found under _ci_artifacts. Ensure CI uploads a 'package.zip' or a publish folder."
          exit 1

      # --- Azure login & deploy via ZIP (Oryx) --------------------------------
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy via ZIP to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: ${{ steps.resolve_pkg.outputs.package }}

      - name: Restart Web App
        shell: pwsh
        run: az webapp restart --resource-group ${{ secrets.AZ_RG }} --name ${{ secrets.AZURE_WEBAPP_NAME }}

      - name: Post-deploy health check
        shell: pwsh
        env:
          PROD_URL: ${{ secrets.PROD_URL }}
        run: |
          Write-Host "üîç Checking /health..."
          for ($i=1; $i -le 30; $i++) {
            try {
              $r = Invoke-WebRequest -Uri "$env:PROD_URL/health" -UseBasicParsing -TimeoutSec 5
              if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 300) { Write-Host "‚úÖ OK"; exit 0 }
            } catch {}
            Start-Sleep -Seconds 5
          }
          Write-Error "‚ùå Health check failed"; exit 1
