name: CD (Deploy Docker Image to Azure)

on:
  workflow_run:
    workflows: ["CI DevSecOps Pipeline"]   # must exactly match your CI 'name'
    types: [completed]
  # (No branch filter ‚Äî avoids mismatches when CI is workflow_dispatch or not on 'master')

jobs:
  deploy-to-azure:
    # Only run when CI concluded successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout (for scripts/logs only)
        uses: actions/checkout@v4

      # --- DIAGNOSTICS: confirm which CI run we're attached to ----------------
      - name: Show triggering workflow_run info
        run: |
          echo "workflow_run.id: ${{ github.event.workflow_run.id }}"
          echo "workflow_run.name: ${{ github.event.workflow_run.name }}"
          echo "workflow_run.head_branch: ${{ github.event.workflow_run.head_branch }}"

      - name: List artifacts on the CI run
        id: list_artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const runId = Number(process.env.RUN_ID);
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100,
            });
            core.info(`Found ${data.artifacts.length} artifact(s) on run ${runId}:`);
            for (const a of data.artifacts) {
              core.info(`- ${a.name} (expired=${a.expired}, size=${a.size_in_bytes})`);
            }
            const has = data.artifacts.some(a => a.name === "notes-webapp-image" && !a.expired);
            core.setOutput("has_notes_image", has ? "true" : "false");
        env:
          RUN_ID: ${{ github.event.workflow_run.id }}

      - name: Fail early if required artifact missing
        if: ${{ steps.list_artifacts.outputs.has_notes_image != 'true' }}
        run: |
          echo "‚ùå Required artifact 'notes-webapp-image' not found on the triggering CI run."
          echo "Make sure CI uploaded it with:"
          echo "  - uses: actions/upload-artifact@v4"
          echo "    with: { name: notes-webapp-image, path: notes_web_app.tar }"
          exit 1

      # --- Download the Docker image TAR produced by CI -----------------------
      - name: Download Docker image artifact from CI run
        uses: actions/download-artifact@v4
        with:
          name: notes-webapp-image                 # must match CI upload name
          path: ./notes-webapp-image              # will contain notes_web_app.tar
          run-id: ${{ github.event.workflow_run.id }}

      - name: Verify artifact files
        run: |
          echo "üì¶ Listing artifact files:"
          ls -l ./notes-webapp-image || true
          test -f ./notes-webapp-image/notes_web_app.tar || (echo "notes_web_app.tar not found in artifact" && exit 1)

      # --- Load & tag the image locally --------------------------------------
      - name: Load Docker image
        run: docker load -i ./notes-webapp-image/notes_web_app.tar

      - name: Tag Docker image for release
        run: docker tag notes_web_app:latest notes_web_app:release

      # --- Azure login & deploy the container image to Web App ---------------
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy image to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}   # e.g., rawsolutions
          images: notes_web_app:release

      - name: Restart Web App
        run: |
          az webapp restart \
            --resource-group ${{ secrets.AZ_RG }} \
            --name ${{ secrets.AZURE_WEBAPP_NAME }}

      - name: Post-deploy health check
        env:
          PROD_URL: ${{ secrets.PROD_URL }}
        run: |
          echo "üîç Checking $PROD_URL/health ..."
          for i in {1..30}; do
            if curl -sf "$PROD_URL/health"; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "Waiting for app to become healthy... ($i/30)"; sleep 5
          done
          echo "‚ùå App failed health check" && exit 1
